[program:{{ project }}-worker-default]
process_name=%(program_name)s
command={{ virtualenv_root }}/bin/newrelic-admin run-program {{ virtualenv_root }}/bin/django-admin.py celery -A {{ pillar['project_name'] }} worker -Q celery --loglevel=INFO --concurrency={{ grains['num_cpus'] * 4 + 1 }}
user={{ pillar['project_name'] }}
autostart=true
autorestart=true
stdout_logfile={{ log_dir }}/%(program_name)s.log
redirect_stderr=true
stderr_logfile={{ log_dir }}/%(program_name)s.error.log
startsecs=1
; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 60
environment=DJANGO_SETTINGS_MODULE="{{ settings }}",
    NEW_RELIC_CONFIG_FILE='{{ newrelic_config_file }}',
    NEW_RELIC_ENVIRONMENT='{{ environment }}'
    {%- for key, value in pillar['secrets'].iteritems() -%}
        ,{{ key }}="{{ value }}"
    {%- endfor -%}
    {%- for key, value in pillar.get('environment_variables',{}).iteritems() -%}
        ,{{ key }}="{{ value }}"
    {%- endfor %}

[program:{{ project }}-celerybeat]
process_name=%(program_name)s
command={{ virtualenv_root }}/bin/django-admin.py celery beat --schedule={{ root_dir }}celerybeat-schedule --pidfile={{ root_dir }}celerybeat.pid
user={{ pillar['project_name'] }}
autostart=true
autorestart=true
stdout_logfile={{ log_dir }}/%(program_name)s.log
redirect_stderr=true
stderr_logfile={{ log_dir }}/%(program_name)s.error.log
startsecs=1
; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 60
environment=DJANGO_SETTINGS_MODULE="{{ settings }}"
    {%- for key, value in pillar['secrets'].iteritems() -%}
        ,{{ key }}="{{ value }}"
    {%- endfor -%}
    {%- for key, value in pillar.get('environment_variables',{}).iteritems() -%}
        ,{{ key }}="{{ value }}"
    {%- endfor %}
